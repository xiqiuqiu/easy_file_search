name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=build,dist,__pycache__

    - name: Test basic functionality
      run: |
        python -c "import excel_gui_search; print('Basic version import successful')"
        
    - name: Test multilingual version
      run: |
        python -c "import excel_gui_search_i18n; print('Multilingual version import successful')"
        
    - name: Test i18n module
      run: |
        python -c "from i18n import init_i18n, t; print('i18n module import successful')"
        
    - name: Test config module
      run: |
        python -c "from config import get_config; print('config module import successful')"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Check for security vulnerabilities
      run: |
        safety check
        bandit -r . -f json --exclude ./build,./dist,./locales

  build-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Test PyInstaller build (basic version)
      run: |
        pyinstaller --onefile --noconsole excel_gui_search.py --distpath dist-basic
    
    - name: Test PyInstaller build (multilingual version)
      run: |
        pyinstaller --onefile --noconsole --add-data "locales${SEP}locales" excel_gui_search_i18n.py --distpath dist-i18n
      env:
        SEP: ${{ runner.os == 'Windows' && ';' || ':' }}
    
    - name: Verify builds exist (Windows)
      if: runner.os == 'Windows'
      run: |
        dir dist-basic\
        dir dist-i18n\
      shell: cmd
    
    - name: Verify builds exist (Unix)
      if: runner.os != 'Windows'
      run: |
        ls -la dist-basic/
        ls -la dist-i18n/
      shell: bash
